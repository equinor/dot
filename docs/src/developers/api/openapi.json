{
    "openapi": "3.1.0",
    "info": {
        "title": "FastAPI",
        "version": "0.1.0"
    },
    "paths": {
        "/v0/edges/label/{edge_label}": {
            "post": {
                "tags": [
                    "edges"
                ],
                "summary": "Create a new edge by its label",
                "description": "Create a new edge between two vertices\n\nArgs:\n    out_vertex_uuid (str): id of the vertex where the edge goes out\n    in_vertex_uuid (str): id of the vertex where the edge goes in\n    edge_label (str): label of the edge (\"contains\" or \"influences\")\n\nReturn:\n    EdgeResponse: Edge (with properties id, outV, inV, uuid, label),\n                    where id == uuid",
                "operationId": "create_v0_edges_label__edge_label__post",
                "parameters": [
                    {
                        "name": "edge_label",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Edge Label"
                        }
                    },
                    {
                        "name": "out_vertex_uuid",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Out Vertex Uuid"
                        }
                    },
                    {
                        "name": "in_vertex_uuid",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "In Vertex Uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EdgeResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v0/edges/{edge_id}": {
            "delete": {
                "tags": [
                    "edges"
                ],
                "summary": "Delete an edge by its UUID",
                "description": "Deletes edges going in and out of the specified vertex\n\nArgs:\n    vertex_uuid (str): id of the vertex\n\nReturn:\n    None",
                "operationId": "delete_v0_edges__edge_id__delete",
                "parameters": [
                    {
                        "name": "edge_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Edge Id"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "tags": [
                    "edges"
                ],
                "summary": "Get an edge by its UUID",
                "description": "Method to read one edge based on the id\n\nArgs:\n    edge_uuid (str): id of the edge\n\nReturns:\n    EdgeResponse: Edge",
                "operationId": "read_v0_edges__edge_id__get",
                "parameters": [
                    {
                        "name": "edge_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Edge Id"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EdgeResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v0/issues/{issue_uuid}": {
            "delete": {
                "tags": [
                    "issues"
                ],
                "summary": "Delete an issue by its UUID",
                "description": "Deletes the issue vertex based on the id and also all in and outgoing edges\n    from this vertex\n\nArgs:\n    issue_uuid (str): id of the issue vertex\n\nReturns:\n    None",
                "operationId": "delete_v0_issues__issue_uuid__delete",
                "parameters": [
                    {
                        "name": "issue_uuid",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Issue Uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "tags": [
                    "issues"
                ],
                "summary": "Get an issue by its UUID",
                "description": "Method to read one issue based on the id\n\nArgs:\n    issue_uuid (str): id of the vertex with the label \"issue\"\n\nReturns:\n    IssueResponse: Issue with all properties",
                "operationId": "read_v0_issues__issue_uuid__get",
                "parameters": [
                    {
                        "name": "issue_uuid",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Issue Uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IssueResponse-Output"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "issues"
                ],
                "summary": "Partial update of an issue by its UUID",
                "description": "Updates the specified issue based on the id with the new issue_data\n\nArgs:\n    issue_uuid (str): id of the issue vertex\n    modified_fields (IssueUpdate): contains properties of the issue\n\nReturns:\n    IssueResponse: Issue with the issue_data as IssueCreate",
                "operationId": "update_v0_issues__issue_uuid__patch",
                "parameters": [
                    {
                        "name": "issue_uuid",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Issue Uuid"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/IssueUpdate"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IssueResponse-Output"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v0/objectives/{objective_uuid}": {
            "delete": {
                "tags": [
                    "objectives"
                ],
                "summary": "Delete an objective by its UUID",
                "description": "Deletes the objective vertex based on the id and also all in and outgoing\n    edges from this vertex\n\nArgs:\n    objective_uuid (str): id of the objective vertex\n\nReturns:\n    None",
                "operationId": "delete_objective_v0_objectives__objective_uuid__delete",
                "parameters": [
                    {
                        "name": "objective_uuid",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Objective Uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "tags": [
                    "objectives"
                ],
                "summary": "Get an objective by its UUID",
                "description": "Method to read one objective based on the id\n\nArgs:\n    objective_uuid (str): id of the vertex with the label \"objective\"\n\nReturns\n    ObjectiveResponse: Objective with all properties",
                "operationId": "read_v0_objectives__objective_uuid__get",
                "parameters": [
                    {
                        "name": "objective_uuid",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Objective Uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ObjectiveResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "objectives"
                ],
                "summary": "Partial update of an objective by its UUID",
                "description": "Updates the specified objective based on the id with the new objective_data\n\nArgs:\n    objective_uuid (str): id of the objective vertex\n    modified_fields (ObjectiveUpdate): contains properties of the objective\n\nReturns:\n    ObjectiveResponse: Objective with the objective_data as ObjectiveData",
                "operationId": "update_objective_v0_objectives__objective_uuid__patch",
                "parameters": [
                    {
                        "name": "objective_uuid",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Objective Uuid"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ObjectiveUpdate"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ObjectiveResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v0/opportunities/{opportunity_uuid}": {
            "delete": {
                "tags": [
                    "opportunities"
                ],
                "summary": "Delete an objective by its UUID",
                "description": "Deletes the opportunity vertex based on the id and also all in and outgoing\n    edges from this vertex\n\nArgs:\n    opportunity_uuid (str): id of the opportunity vertex\n\nReturns\n    None",
                "operationId": "delete_v0_opportunities__opportunity_uuid__delete",
                "parameters": [
                    {
                        "name": "opportunity_uuid",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Opportunity Uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "tags": [
                    "opportunities"
                ],
                "summary": "Get an opportunity by its UUID",
                "description": "Read all opportunitys connected to one project with filter possibilities\n\nArgs:\n    project_uuid (str): id of the project vertex\n    vertex_label (str): label of the vertices of interest\n    edge_label (str):  edge_label to clarify the connection between the project\n                        node and opportunity node, should always be \"contains\"\n                        in this method (default \"contains\")\n    filter_model (Filter(BaseModel)): contains a dict with different properties\n                                        for filtering, like tag and description\n\nReturns\n    List[OpportunityResponse]: List of Opportunitys which satisfy the condition\n                                to be connected to the Project vertex with a\n                                \"contains\" edge and have the label \"opportunity\"\n                                and satisfy the filters when the filter_model is\n                                given",
                "operationId": "read_v0_opportunities__opportunity_uuid__get",
                "parameters": [
                    {
                        "name": "opportunity_uuid",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Opportunity Uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OpportunityResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "opportunities"
                ],
                "summary": "Partial update of an opportunity by its UUID",
                "description": "Updates the specified opportunity based on the id with the new\n    opportunity_data\n\nArgs:\n    opportunity_uuid (str): id of the opportunity vertex\n    modified_fields (OpportunityUpdate): contains properties of the opportunity\n\nReturns\n    OpportunityResponse: Opportunity with the opportunity_data as\n                            OpportunityData",
                "operationId": "update_v0_opportunities__opportunity_uuid__patch",
                "parameters": [
                    {
                        "name": "opportunity_uuid",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Opportunity Uuid"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/OpportunityUpdate"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OpportunityResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v0/project/{project_uuid}/edges/label/{edge_label}/vertices": {
            "get": {
                "tags": [
                    "edges"
                ],
                "summary": "Get edges by their label and their heads and tails from a project by its UUID",
                "description": "Method to return all edges with the specified edge label and linking vertices\n    with given properties\n\nArgs:\n    project_uuid (str): id of the project vertex\n    edge_label (str): label of the edge (\"contains\" or \"influences\")\n    vertex_uuid (list[str]): list of vertices uuid of the sub-project\n\nReturns:\n    List[EdgeResponse]: List of Edges",
                "operationId": "read_all_edges_from_sub_project_v0_project__project_uuid__edges_label__edge_label__vertices_get",
                "parameters": [
                    {
                        "name": "project_uuid",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Project Uuid"
                        }
                    },
                    {
                        "name": "edge_label",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Edge Label"
                        }
                    },
                    {
                        "name": "vertex_uuid",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "title": "Vertex Uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/EdgeResponse"
                                    },
                                    "title": "Response Read All Edges From Sub Project V0 Project  Project Uuid  Edges Label  Edge Label  Vertices Get"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v0/projects": {
            "get": {
                "tags": [
                    "projects"
                ],
                "summary": "Read all projects",
                "description": "Reads all project vertices\n\nArgs:\n    None\n\nReturns\n    List[ProjectResponse]: List of Projects in the database",
                "operationId": "read_projects_all_v0_projects_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/ProjectResponse"
                                    },
                                    "type": "array",
                                    "title": "Response Read Projects All V0 Projects Get"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found"
                    }
                }
            },
            "post": {
                "tags": [
                    "projects"
                ],
                "summary": "Create a new project",
                "description": "Method to create a new project vertex\n\n    Creates vertex with the label \"project\" and the properties of project_data\n\nArgs:\n    project_data (ProjectCreate): contains all properties for the project\n\nReturns\n    ProjectResponse: Created Project with the project_data as ProjectCreate",
                "operationId": "create_v0_projects_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ProjectCreate"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProjectResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v0/projects/import": {
            "post": {
                "tags": [
                    "projects"
                ],
                "summary": "Import a project",
                "description": "Method to import a project in JSON format\n\nArgs:\n    project_json (dict): JSON dictionary with the project data\n\nReturns\n    None",
                "operationId": "import_project_v0_projects_import_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "title": "Project Json"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v0/projects/{project_uuid}": {
            "delete": {
                "tags": [
                    "projects"
                ],
                "summary": "Delete a project",
                "description": "Gets all vertices connected (via edge with label \"contains\") to the project\n        vertex with the id = project_uuid\n\n    Deletes all edges from these vertices and deletes afterwards all vertices\n    connected to the project\n    Deletes the project vertex based on the id\n\nArgs\n    project_uuid (str): id of the project vertex\n\nReturns\n    None",
                "operationId": "delete_v0_projects__project_uuid__delete",
                "parameters": [
                    {
                        "name": "project_uuid",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Project Uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "tags": [
                    "projects"
                ],
                "summary": "Read a project",
                "description": "Method to read one project based on the id\n\nArgs:\n    project_uuid (str): id of the vertex with the label \"project\"'\n\nReturns\n    ProjectResponse: Project with all properties",
                "operationId": "read_v0_projects__project_uuid__get",
                "parameters": [
                    {
                        "name": "project_uuid",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Project Uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProjectResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "projects"
                ],
                "summary": "Update a project",
                "description": "Updates the specified project based on the id with the new project_data\n\nArgs:\n    project_uuid (str): id of the project vertex\n    modified_fields (ProjectUpdate): contains properties of the project\n\nReturns\n    ProjectResponse: Project with the project_data as ProjectUpdate",
                "operationId": "update_v0_projects__project_uuid__patch",
                "parameters": [
                    {
                        "name": "project_uuid",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Project Uuid"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ProjectUpdate"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProjectResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v0/projects/{project_uuid}/decision-tree": {
            "get": {
                "tags": [
                    "structures"
                ],
                "summary": "Get the decision tree from project by its UUID",
                "description": "Method to read the necessary data to create the decision tree structure\n\nArgs:\n    project_uuid (str): id of the project vertex\n\nReturns\n    DecisionTreeResponse: Dict of vertices",
                "operationId": "convert_influence_diagram_to_decision_tree_model_v0_projects__project_uuid__decision_tree_get",
                "parameters": [
                    {
                        "name": "project_uuid",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Project Uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DecisionTreeResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v0/projects/{project_uuid}/edges/label/{edge_label}": {
            "get": {
                "tags": [
                    "edges"
                ],
                "summary": "Get edges by their label from a project by its UUID",
                "description": "Method to return all edges with the specified edge label\n\nArgs:\n    project_uuid (str): id of the project vertex\n    edge_label (str): label of the edge (\"contains\" or \"influences\")\n\nReturns:\n    List[EdgeResponse]: List of Edges",
                "operationId": "read_all_edges_from_project_v0_projects__project_uuid__edges_label__edge_label__get",
                "parameters": [
                    {
                        "name": "project_uuid",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Project Uuid"
                        }
                    },
                    {
                        "name": "edge_label",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Edge Label"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/EdgeResponse"
                                    },
                                    "title": "Response Read All Edges From Project V0 Projects  Project Uuid  Edges Label  Edge Label  Get"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v0/projects/{project_uuid}/export": {
            "get": {
                "tags": [
                    "projects"
                ],
                "summary": "Export a project",
                "description": "Method to export one project based on the id in JSON format\n\nArgs\n    project_uuid (str): id of the vertex with the label \"project\"'\n\nReturns\n    json_dict: JSON dictionary containing the project data",
                "operationId": "export_project_v0_projects__project_uuid__export_get",
                "parameters": [
                    {
                        "name": "project_uuid",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Project Uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "title": "Response Export Project V0 Projects  Project Uuid  Export Get"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v0/projects/{project_uuid}/influence-diagram": {
            "get": {
                "tags": [
                    "structures"
                ],
                "summary": "Get the influence diagram from project by its UUID",
                "description": "Method to read the necessary data to create the influence diagram structure\n\nArgs:\n    project_uuid (str): id of the project vertex\n\nReturns\n    InfluenceDiagramResponse: Dict of vertices and edges",
                "operationId": "read_influence_diagram_v0_projects__project_uuid__influence_diagram_get",
                "parameters": [
                    {
                        "name": "project_uuid",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Project Uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InfluenceDiagramResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v0/projects/{project_uuid}/issues": {
            "get": {
                "tags": [
                    "issues"
                ],
                "summary": "Get all issues by their project UUID",
                "description": "Read all issues connected to one project with filter possibilities\n\nArgs:\n    project_uuid (str): id of the project vertex\n    vertex_label (str): label of the vertices of interest\n    edge_label (str): edge_label to clarify the connection between the project\n                        node and issue node, should always be \"contains\" in this\n                        method (default \"contains\")\n    filter_model (Filter(BaseModel)): contains a dict with different properties\n                                        for filtering, like category, tag,\n                                        shortname\n\nReturns:\n    List[IssueResponse]: List of Issues which satisfy the condition to be\n                            connected to the Project vertex with a \"contains\" edge\n                            and have the label \"issue\" and satisfy the filters\n                            when given in filter_model",
                "operationId": "read_issues_all_v0_projects__project_uuid__issues_get",
                "parameters": [
                    {
                        "name": "project_uuid",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Project Uuid"
                        }
                    },
                    {
                        "name": "category",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Category"
                        }
                    },
                    {
                        "name": "hierarchy",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Hierarchy"
                        }
                    },
                    {
                        "name": "tag",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Tag"
                        }
                    },
                    {
                        "name": "shortname",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Shortname"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Name"
                        }
                    },
                    {
                        "name": "decisionType",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Decisiontype"
                        }
                    },
                    {
                        "name": "keyUncertainty",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Keyuncertainty"
                        }
                    },
                    {
                        "name": "boundary",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Boundary"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/IssueResponse-Output"
                                    },
                                    "title": "Response Read Issues All V0 Projects  Project Uuid  Issues Get"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "issues"
                ],
                "summary": "Create a new issue by its project UUID",
                "description": "Method to create a new issue connected to a project vertex\n\n    Creates vertex with the label \"issue\" and the properties of issue_data\n    Creates an edge between the project vertex specified by project_uuid and\n    the newly create issue vertex\n\nArgs:\n    project_uuid (str): id of the project vertex the new issue will be\n                        connected to\n    issue_data (IssueCreate): contains all properties for the issue\n\nReturns:\n    IssueResponse: Created Issue with the issue_data as IssueCreate",
                "operationId": "create_v0_projects__project_uuid__issues_post",
                "parameters": [
                    {
                        "name": "project_uuid",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Project Uuid"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/IssueCreate"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IssueResponse-Output"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v0/projects/{project_uuid}/merge": {
            "post": {
                "tags": [
                    "issues"
                ],
                "summary": "Merged 2 issues within a project by its UUID",
                "description": "Function to merge two issues, will create a new issue if source issue or\n    destination issue is not a merged issue already.\n\n    Will add new edges \"merged_into\" between the merged issue and the source\n    issue and/or destination issue\n    Will remove the \"contains\" edge between the project and the children issues\n    of the new merged issue\n\nArgs:\n    project_uuid (str)\n    source_issue (IssueResponse)\n    destination_issue (IssueResponse)\n\nReturns:\n    merged_issue (IssueResponse)",
                "operationId": "merge_v0_projects__project_uuid__merge_post",
                "parameters": [
                    {
                        "name": "project_uuid",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Project Uuid"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Body_merge_v0_projects__project_uuid__merge_post"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IssueResponse-Output"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v0/projects/{project_uuid}/objectives": {
            "get": {
                "tags": [
                    "objectives"
                ],
                "summary": "Get all objectives by their project UUID",
                "description": "Read all objectives connected to one project with filter possibilities\n\nArgs:\n    project_uuid (str): id of the project vertex\n    vertex_label (str): label of the vertices of interest\n    edge_label (str): edge_label to clarify the connection between the project\n                        node and objective node, should always be \"contains\" in\n                        this method (default \"contains\")\n    filter_model (Filter (BaseModel))\n        contains a dict with different properties for filtering, like hierarchy,\n        tag, and description\n\nReturns\n    List[ObjectiveResponse]: List of Objectives which satisfy the condition to\n                                be connected to the Project vertex with a\n                                \"contains\" edge and have the label \"objective\" and\n                                satisfy the filters when the filter_model is given",
                "operationId": "read_objectives_all_v0_projects__project_uuid__objectives_get",
                "parameters": [
                    {
                        "name": "project_uuid",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Project Uuid"
                        }
                    },
                    {
                        "name": "category",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Category"
                        }
                    },
                    {
                        "name": "hierarchy",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Hierarchy"
                        }
                    },
                    {
                        "name": "tag",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Tag"
                        }
                    },
                    {
                        "name": "shortname",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Shortname"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Name"
                        }
                    },
                    {
                        "name": "decisionType",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Decisiontype"
                        }
                    },
                    {
                        "name": "keyUncertainty",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Keyuncertainty"
                        }
                    },
                    {
                        "name": "boundary",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Boundary"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ObjectiveResponse"
                                    },
                                    "title": "Response Read Objectives All V0 Projects  Project Uuid  Objectives Get"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "objectives"
                ],
                "summary": "Create a new objective by its project UUID",
                "description": "Method to create a new objective connected to a project vertex\n\n    Creates vertex with the label \"objective\" and the properties of\n    objective_data\n    Creates an edge between the project vertex specified by project_uuid\n    and the newly create objective vertex\n\nArgs:\n    project_uuid (str): id of the project vertex the new objective will be\n                        connected to\n    objective_data (ObjectiveCreate): contains all properties for the objective\n\nReturns:\n    ObjectiveResponse: Created Objective with the objective_data as\n                        ObjectiveData",
                "operationId": "create_v0_projects__project_uuid__objectives_post",
                "parameters": [
                    {
                        "name": "project_uuid",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Project Uuid"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ObjectiveCreate"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ObjectiveResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v0/projects/{project_uuid}/opportunities": {
            "get": {
                "tags": [
                    "opportunities"
                ],
                "summary": "Get all opportunities by their project UUID",
                "description": "Read all opportunitys connected to one project with filter possibilities\n\nArgs:\n    project_uuid (str): id of the project vertex\n    vertex_label (str): label of the vertices of interest\n    edge_label (str):  edge_label to clarify the connection between the project\n                        node and opportunity node, should always be \"contains\"\n                        in this method (default \"contains\")\n    filter_model (Filter(BaseModel)): contains a dict with different properties\n                                        for filtering, like tag and description\n\nReturns\n    List[OpportunityResponse]: List of Opportunitys which satisfy the condition\n                                to be connected to the Project vertex with a\n                                \"contains\" edge and have the label \"opportunity\"\n                                and satisfy the filters when the filter_model is\n                                given",
                "operationId": "read_opportunities_all_v0_projects__project_uuid__opportunities_get",
                "parameters": [
                    {
                        "name": "project_uuid",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Project Uuid"
                        }
                    },
                    {
                        "name": "category",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Category"
                        }
                    },
                    {
                        "name": "hierarchy",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Hierarchy"
                        }
                    },
                    {
                        "name": "tag",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Tag"
                        }
                    },
                    {
                        "name": "shortname",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Shortname"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Name"
                        }
                    },
                    {
                        "name": "decisionType",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Decisiontype"
                        }
                    },
                    {
                        "name": "keyUncertainty",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Keyuncertainty"
                        }
                    },
                    {
                        "name": "boundary",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Boundary"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/OpportunityResponse"
                                    },
                                    "title": "Response Read Opportunities All V0 Projects  Project Uuid  Opportunities Get"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "opportunities"
                ],
                "summary": "Create a new opportunity by its project UUID",
                "description": "Method to create a new opportunity connected to a project vertex\n\n    Creates vertex with the label \"opportunity\" and the properties of\n    opportunity_data\n    Creates an edge between the project vertex specified by project_uuid and the\n    newly create opportunity vertex\n\nArgs:\n    project_uuid (str): id of the project vertex the new opportunity will be\n                        connected to\n    opportunity_data (OpportunityCreate): contains all properties for the\n                                        opportunity\n\nReturns:\n    OpportunityResponse: Created Opportunity with the opportunity_data as\n    OpportunityCreate",
                "operationId": "create_v0_projects__project_uuid__opportunities_post",
                "parameters": [
                    {
                        "name": "project_uuid",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Project Uuid"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/OpportunityCreate"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OpportunityResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v0/projects/{project_uuid}/un-merge/issues/{merged_issue_uuid}": {
            "post": {
                "tags": [
                    "issues"
                ],
                "summary": "Unmerge a merged issue by its UUID within a project by its UUID",
                "description": "Function to un-merge a merged issue\n\n    Will create new \"contains\" edges for the parents of the merged issue\n    Will remove the merged issue vertex\n\nArgs:\n    project_uuid (str)\n    merged_issue_uuid (str)\n\nReturns:\n    list[str]: uuids of the issues that had been merged",
                "operationId": "un_merge_v0_projects__project_uuid__un_merge_issues__merged_issue_uuid__post",
                "parameters": [
                    {
                        "name": "project_uuid",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Project Uuid"
                        }
                    },
                    {
                        "name": "merged_issue_uuid",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Merged Issue Uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    },
                                    "title": "Response Un Merge V0 Projects  Project Uuid  Un Merge Issues  Merged Issue Uuid  Post"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v0/vertices/label/{vertex_label}": {
            "get": {
                "tags": [
                    "vertex"
                ],
                "summary": "Get all vertices by their label",
                "description": "Read all vertices given a label\n\nArgs:\n    vertex_label (str): label of vertices to read (e.g. opportunity)\n\nReturns:\n    list[VertexResponse]: list of vertices with the given label",
                "operationId": "read_vertex_all_v0_vertices_label__vertex_label__get",
                "parameters": [
                    {
                        "name": "vertex_label",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Vertex Label"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/VertexResponse"
                                    },
                                    "title": "Response Read Vertex All V0 Vertices Label  Vertex Label  Get"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "vertex"
                ],
                "summary": "Create a new vertex by its label",
                "description": "Creates a new vertex based on vertex data\n\nArgs:\n    vertex_label (str): given vertex label for gremlin DB, e.g. \"issue\",\n                        \"project\", \"opportunity\", \"objective\"\n    vertex (VertexCreate): data for properties in vertex\n        provides generated uuid\n        provides uuid will also be set as the id in the DB\n\nReturn:\n    VertexResponse: dict of the created vertex",
                "operationId": "create_vertex_v0_vertices_label__vertex_label__post",
                "parameters": [
                    {
                        "name": "vertex_label",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Vertex Label"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/VertexCreate"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/VertexResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v0/vertices/{vertex_uuid}": {
            "delete": {
                "tags": [
                    "vertex"
                ],
                "summary": "Delete a vertex by its UUID",
                "description": "method to delete a vertex based on the vertex id\n\nArgs:\n    vertex_uuid (str): id of the vertex which will be deleted\n\nReturn:\n    None",
                "operationId": "delete_vertex_v0_vertices__vertex_uuid__delete",
                "parameters": [
                    {
                        "name": "vertex_uuid",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Vertex Uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "tags": [
                    "vertex"
                ],
                "summary": "Get a vertex by its UUID",
                "description": "Reads a vertex based on the vertex id in the DB\n\nArgs:\n    vertex_uuid (str): uuid of the vertex.\n\n        uuid property [g.V().property(\"uuid\",...)] and vertex id [g.V(id)] are\n        the same based on the implementation in the create method\n        This is an active choice of us, otherwise, the id will be automatically\n        generated in the DB\n\nReturn:\n    VertexResponse: dict with all data of the vertex (VertexResponse)",
                "operationId": "read_vertex_v0_vertices__vertex_uuid__get",
                "parameters": [
                    {
                        "name": "vertex_uuid",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Vertex Uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/VertexResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "vertex"
                ],
                "summary": "Delete a vertex by its UUID",
                "description": "Updated the specified vertex with the new vertex properties\n\nArgs:\n    vertex_uuid (str): id of the to be updated vertex\n    modified_fields (VertexUpdate): properties of vertices which will\n                                    be updated\n\nReturn:\n    VertexResponse: vertex dict with updated properties",
                "operationId": "update_vertex_v0_vertices__vertex_uuid__patch",
                "parameters": [
                    {
                        "name": "vertex_uuid",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Vertex Uuid"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/VertexUpdate"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/VertexResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v0/vertices/{vertex_uuid}/children": {
            "get": {
                "tags": [
                    "vertex"
                ],
                "summary": "Get the children of a vertex by its UUID",
                "description": "Read vertices based on outgoing edge labels.\n\nArgs:\n    vertex_uuid (str): id of the vertex\n    edge_label (str): edge label, e.g. \"contains\" or \"influences\"\n    original_vertex_label (str, optional): label of the vertices we are\n                                            interested in (e.g. only issues or\n                                            also opportunities and objectives).\n                                            Defaults to None.\n    filter_model (Filter, optional): BaseModel containing properties to use as\n                                        a filter, for example the type or tag of\n                                        vertices. Defaults to None.\n\nReturns:\n    List[VertexResponse]:\n        List of all vertices connected to the vertex with the vertex id\n        vertex_uuid through an edge with the label edge_label\n        When original_vertex_label is given the vertices will be filtered\n        based on the label of the vertex, e.g. it will return either \"issue\",\n        \"opportunity\" or \"objective\" vertices otherwise, all vertices are\n        returned\n        When filter_model is given, the vertices will be filtered based on the\n        content of the filter model. Currently this can be \"tag\", \"type\",...\n        and other properties of the vertices defined in the database\n        If filter_model is None, no filter will be applied and all vertices will\n        be returned.",
                "operationId": "read_out_vertex_v0_vertices__vertex_uuid__children_get",
                "parameters": [
                    {
                        "name": "vertex_uuid",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Vertex Uuid"
                        }
                    },
                    {
                        "name": "edge_label",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Edge Label"
                        }
                    },
                    {
                        "name": "original_vertex_label",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "title": "Original Vertex Label"
                        }
                    },
                    {
                        "name": "category",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Category"
                        }
                    },
                    {
                        "name": "hierarchy",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Hierarchy"
                        }
                    },
                    {
                        "name": "tag",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Tag"
                        }
                    },
                    {
                        "name": "shortname",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Shortname"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Name"
                        }
                    },
                    {
                        "name": "decisionType",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Decisiontype"
                        }
                    },
                    {
                        "name": "keyUncertainty",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Keyuncertainty"
                        }
                    },
                    {
                        "name": "boundary",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Boundary"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/VertexResponse"
                                    },
                                    "title": "Response Read Out Vertex V0 Vertices  Vertex Uuid  Children Get"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v0/vertices/{vertex_uuid}/edges/label/{edge_label}/incoming": {
            "get": {
                "tags": [
                    "edges"
                ],
                "summary": "Get incoming edges by their label and their tails from a project by its UUID",
                "description": "Returns edges going in to the specified vertex\n\nArgs:\n    vertex_uuid (str): id of the vertex\n    edge_label (str): label of the edge\nReturn:\n    List of edges",
                "operationId": "read_in_edge_to_vertex_v0_vertices__vertex_uuid__edges_label__edge_label__incoming_get",
                "parameters": [
                    {
                        "name": "vertex_uuid",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Vertex Uuid"
                        }
                    },
                    {
                        "name": "edge_label",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Edge Label"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/EdgeResponse"
                                    },
                                    "title": "Response Read In Edge To Vertex V0 Vertices  Vertex Uuid  Edges Label  Edge Label  Incoming Get"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v0/vertices/{vertex_uuid}/edges/label/{edge_label}/outgoing": {
            "get": {
                "tags": [
                    "edges"
                ],
                "summary": "Get outgoing edges by their label and their heads from a project by its UUID",
                "description": "Returns edges going out of the specified vertex\n\nArgs:\n    vertex_uuid (str): id of the vertex\n    edge_label (str): label of the edge\nReturn:\n    List of edges",
                "operationId": "read_out_edge_from_vertex_v0_vertices__vertex_uuid__edges_label__edge_label__outgoing_get",
                "parameters": [
                    {
                        "name": "vertex_uuid",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Vertex Uuid"
                        }
                    },
                    {
                        "name": "edge_label",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Edge Label"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/EdgeResponse"
                                    },
                                    "title": "Response Read Out Edge From Vertex V0 Vertices  Vertex Uuid  Edges Label  Edge Label  Outgoing Get"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v0/vertices/{vertex_uuid}/parents": {
            "get": {
                "tags": [
                    "vertex"
                ],
                "summary": "Get the parents of a vertex by its UUID",
                "description": "Read vertices based on incoming edge labels.\n\nArgs:\n    vertex_uuid (str): id of the vertex\n    edge_label (str): edge label, e.g. \"contains\" or \"influences\"\n    original_vertex_label (str, optional): label of the vertices we are\n                                            interested in (e.g. only issues or\n                                            also opportunities and objectives).\n                                            Defaults to None.\n    filter_model (Filter, optional): BaseModel containing properties to use\n                                        as a filter, for example the type or tag\n                                        of vertices. Defaults to None.\n\nReturns:\n    List[VertexResponse]: List of all vertices connected to the vertex with\n                            the vertex id vertex_uuid through an incoming edge\n                            with the label edge_label\n\n        When original_vertex_label is given, the vertices will be filtered\n        based on the label of the vertex, e.g. it will return either \"issue\",\n        \"opportunity\" or \"objective\" vertices. Otherwise, all vertices are\n        returned.\n        When filter_model is given, the vertices will be filtered based on\n        the content of the filter model. Currently, this can be \"tag\", \"type\",\n        and other properties of the vertices defined in the database.\n        If filter_model is None, no filter will be applied and all vertices will\n        be returned.",
                "operationId": "read_in_vertex_v0_vertices__vertex_uuid__parents_get",
                "parameters": [
                    {
                        "name": "vertex_uuid",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Vertex Uuid"
                        }
                    },
                    {
                        "name": "edge_label",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Edge Label"
                        }
                    },
                    {
                        "name": "original_vertex_label",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "title": "Original Vertex Label"
                        }
                    },
                    {
                        "name": "category",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Category"
                        }
                    },
                    {
                        "name": "hierarchy",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Hierarchy"
                        }
                    },
                    {
                        "name": "tag",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Tag"
                        }
                    },
                    {
                        "name": "shortname",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Shortname"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Name"
                        }
                    },
                    {
                        "name": "decisionType",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Decisiontype"
                        }
                    },
                    {
                        "name": "keyUncertainty",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Keyuncertainty"
                        }
                    },
                    {
                        "name": "boundary",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Boundary"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/VertexResponse"
                                    },
                                    "title": "Response Read In Vertex V0 Vertices  Vertex Uuid  Parents Get"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/latest/edges/label/{edge_label}": {
            "post": {
                "tags": [
                    "edges"
                ],
                "summary": "Create a new edge by its label",
                "description": "Create a new edge between two vertices\n\nArgs:\n    out_vertex_uuid (str): id of the vertex where the edge goes out\n    in_vertex_uuid (str): id of the vertex where the edge goes in\n    edge_label (str): label of the edge (\"contains\" or \"influences\")\n\nReturn:\n    EdgeResponse: Edge (with properties id, outV, inV, uuid, label),\n                    where id == uuid",
                "operationId": "create_latest_edges_label__edge_label__post",
                "parameters": [
                    {
                        "name": "edge_label",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Edge Label"
                        }
                    },
                    {
                        "name": "out_vertex_uuid",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Out Vertex Uuid"
                        }
                    },
                    {
                        "name": "in_vertex_uuid",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "In Vertex Uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EdgeResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/latest/edges/{edge_id}": {
            "delete": {
                "tags": [
                    "edges"
                ],
                "summary": "Delete an edge by its UUID",
                "description": "Deletes edges going in and out of the specified vertex\n\nArgs:\n    vertex_uuid (str): id of the vertex\n\nReturn:\n    None",
                "operationId": "delete_latest_edges__edge_id__delete",
                "parameters": [
                    {
                        "name": "edge_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Edge Id"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "tags": [
                    "edges"
                ],
                "summary": "Get an edge by its UUID",
                "description": "Method to read one edge based on the id\n\nArgs:\n    edge_uuid (str): id of the edge\n\nReturns:\n    EdgeResponse: Edge",
                "operationId": "read_latest_edges__edge_id__get",
                "parameters": [
                    {
                        "name": "edge_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Edge Id"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EdgeResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/latest/issues/{issue_uuid}": {
            "delete": {
                "tags": [
                    "issues"
                ],
                "summary": "Delete an issue by its UUID",
                "description": "Deletes the issue vertex based on the id and also all in and outgoing edges\n    from this vertex\n\nArgs:\n    issue_uuid (str): id of the issue vertex\n\nReturns:\n    None",
                "operationId": "delete_latest_issues__issue_uuid__delete",
                "parameters": [
                    {
                        "name": "issue_uuid",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Issue Uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "tags": [
                    "issues"
                ],
                "summary": "Get an issue by its UUID",
                "description": "Method to read one issue based on the id\n\nArgs:\n    issue_uuid (str): id of the vertex with the label \"issue\"\n\nReturns:\n    IssueResponse: Issue with all properties",
                "operationId": "read_latest_issues__issue_uuid__get",
                "parameters": [
                    {
                        "name": "issue_uuid",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Issue Uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IssueResponse-Output"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "issues"
                ],
                "summary": "Partial update of an issue by its UUID",
                "description": "Updates the specified issue based on the id with the new issue_data\n\nArgs:\n    issue_uuid (str): id of the issue vertex\n    modified_fields (IssueUpdate): contains properties of the issue\n\nReturns:\n    IssueResponse: Issue with the issue_data as IssueCreate",
                "operationId": "update_latest_issues__issue_uuid__patch",
                "parameters": [
                    {
                        "name": "issue_uuid",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Issue Uuid"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/IssueUpdate"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IssueResponse-Output"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/latest/objectives/{objective_uuid}": {
            "delete": {
                "tags": [
                    "objectives"
                ],
                "summary": "Delete an objective by its UUID",
                "description": "Deletes the objective vertex based on the id and also all in and outgoing\n    edges from this vertex\n\nArgs:\n    objective_uuid (str): id of the objective vertex\n\nReturns:\n    None",
                "operationId": "delete_objective_latest_objectives__objective_uuid__delete",
                "parameters": [
                    {
                        "name": "objective_uuid",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Objective Uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "tags": [
                    "objectives"
                ],
                "summary": "Get an objective by its UUID",
                "description": "Method to read one objective based on the id\n\nArgs:\n    objective_uuid (str): id of the vertex with the label \"objective\"\n\nReturns\n    ObjectiveResponse: Objective with all properties",
                "operationId": "read_latest_objectives__objective_uuid__get",
                "parameters": [
                    {
                        "name": "objective_uuid",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Objective Uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ObjectiveResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "objectives"
                ],
                "summary": "Partial update of an objective by its UUID",
                "description": "Updates the specified objective based on the id with the new objective_data\n\nArgs:\n    objective_uuid (str): id of the objective vertex\n    modified_fields (ObjectiveUpdate): contains properties of the objective\n\nReturns:\n    ObjectiveResponse: Objective with the objective_data as ObjectiveData",
                "operationId": "update_objective_latest_objectives__objective_uuid__patch",
                "parameters": [
                    {
                        "name": "objective_uuid",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Objective Uuid"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ObjectiveUpdate"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ObjectiveResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/latest/opportunities/{opportunity_uuid}": {
            "delete": {
                "tags": [
                    "opportunities"
                ],
                "summary": "Delete an objective by its UUID",
                "description": "Deletes the opportunity vertex based on the id and also all in and outgoing\n    edges from this vertex\n\nArgs:\n    opportunity_uuid (str): id of the opportunity vertex\n\nReturns\n    None",
                "operationId": "delete_latest_opportunities__opportunity_uuid__delete",
                "parameters": [
                    {
                        "name": "opportunity_uuid",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Opportunity Uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "tags": [
                    "opportunities"
                ],
                "summary": "Get an opportunity by its UUID",
                "description": "Read all opportunitys connected to one project with filter possibilities\n\nArgs:\n    project_uuid (str): id of the project vertex\n    vertex_label (str): label of the vertices of interest\n    edge_label (str):  edge_label to clarify the connection between the project\n                        node and opportunity node, should always be \"contains\"\n                        in this method (default \"contains\")\n    filter_model (Filter(BaseModel)): contains a dict with different properties\n                                        for filtering, like tag and description\n\nReturns\n    List[OpportunityResponse]: List of Opportunitys which satisfy the condition\n                                to be connected to the Project vertex with a\n                                \"contains\" edge and have the label \"opportunity\"\n                                and satisfy the filters when the filter_model is\n                                given",
                "operationId": "read_latest_opportunities__opportunity_uuid__get",
                "parameters": [
                    {
                        "name": "opportunity_uuid",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Opportunity Uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OpportunityResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "opportunities"
                ],
                "summary": "Partial update of an opportunity by its UUID",
                "description": "Updates the specified opportunity based on the id with the new\n    opportunity_data\n\nArgs:\n    opportunity_uuid (str): id of the opportunity vertex\n    modified_fields (OpportunityUpdate): contains properties of the opportunity\n\nReturns\n    OpportunityResponse: Opportunity with the opportunity_data as\n                            OpportunityData",
                "operationId": "update_latest_opportunities__opportunity_uuid__patch",
                "parameters": [
                    {
                        "name": "opportunity_uuid",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Opportunity Uuid"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/OpportunityUpdate"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OpportunityResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/latest/project/{project_uuid}/edges/label/{edge_label}/vertices": {
            "get": {
                "tags": [
                    "edges"
                ],
                "summary": "Get edges by their label and their heads and tails from a project by its UUID",
                "description": "Method to return all edges with the specified edge label and linking vertices\n    with given properties\n\nArgs:\n    project_uuid (str): id of the project vertex\n    edge_label (str): label of the edge (\"contains\" or \"influences\")\n    vertex_uuid (list[str]): list of vertices uuid of the sub-project\n\nReturns:\n    List[EdgeResponse]: List of Edges",
                "operationId": "read_all_edges_from_sub_project_latest_project__project_uuid__edges_label__edge_label__vertices_get",
                "parameters": [
                    {
                        "name": "project_uuid",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Project Uuid"
                        }
                    },
                    {
                        "name": "edge_label",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Edge Label"
                        }
                    },
                    {
                        "name": "vertex_uuid",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "title": "Vertex Uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/EdgeResponse"
                                    },
                                    "title": "Response Read All Edges From Sub Project Latest Project  Project Uuid  Edges Label  Edge Label  Vertices Get"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/latest/projects": {
            "get": {
                "tags": [
                    "projects"
                ],
                "summary": "Read all projects",
                "description": "Reads all project vertices\n\nArgs:\n    None\n\nReturns\n    List[ProjectResponse]: List of Projects in the database",
                "operationId": "read_projects_all_latest_projects_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/ProjectResponse"
                                    },
                                    "type": "array",
                                    "title": "Response Read Projects All Latest Projects Get"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found"
                    }
                }
            },
            "post": {
                "tags": [
                    "projects"
                ],
                "summary": "Create a new project",
                "description": "Method to create a new project vertex\n\n    Creates vertex with the label \"project\" and the properties of project_data\n\nArgs:\n    project_data (ProjectCreate): contains all properties for the project\n\nReturns\n    ProjectResponse: Created Project with the project_data as ProjectCreate",
                "operationId": "create_latest_projects_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ProjectCreate"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProjectResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/latest/projects/import": {
            "post": {
                "tags": [
                    "projects"
                ],
                "summary": "Import a project",
                "description": "Method to import a project in JSON format\n\nArgs:\n    project_json (dict): JSON dictionary with the project data\n\nReturns\n    None",
                "operationId": "import_project_latest_projects_import_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "title": "Project Json"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/latest/projects/{project_uuid}": {
            "delete": {
                "tags": [
                    "projects"
                ],
                "summary": "Delete a project",
                "description": "Gets all vertices connected (via edge with label \"contains\") to the project\n        vertex with the id = project_uuid\n\n    Deletes all edges from these vertices and deletes afterwards all vertices\n    connected to the project\n    Deletes the project vertex based on the id\n\nArgs\n    project_uuid (str): id of the project vertex\n\nReturns\n    None",
                "operationId": "delete_latest_projects__project_uuid__delete",
                "parameters": [
                    {
                        "name": "project_uuid",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Project Uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "tags": [
                    "projects"
                ],
                "summary": "Read a project",
                "description": "Method to read one project based on the id\n\nArgs:\n    project_uuid (str): id of the vertex with the label \"project\"'\n\nReturns\n    ProjectResponse: Project with all properties",
                "operationId": "read_latest_projects__project_uuid__get",
                "parameters": [
                    {
                        "name": "project_uuid",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Project Uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProjectResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "projects"
                ],
                "summary": "Update a project",
                "description": "Updates the specified project based on the id with the new project_data\n\nArgs:\n    project_uuid (str): id of the project vertex\n    modified_fields (ProjectUpdate): contains properties of the project\n\nReturns\n    ProjectResponse: Project with the project_data as ProjectUpdate",
                "operationId": "update_latest_projects__project_uuid__patch",
                "parameters": [
                    {
                        "name": "project_uuid",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Project Uuid"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ProjectUpdate"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProjectResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/latest/projects/{project_uuid}/decision-tree": {
            "get": {
                "tags": [
                    "structures"
                ],
                "summary": "Get the decision tree from project by its UUID",
                "description": "Method to read the necessary data to create the decision tree structure\n\nArgs:\n    project_uuid (str): id of the project vertex\n\nReturns\n    DecisionTreeResponse: Dict of vertices",
                "operationId": "convert_influence_diagram_to_decision_tree_model_latest_projects__project_uuid__decision_tree_get",
                "parameters": [
                    {
                        "name": "project_uuid",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Project Uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DecisionTreeResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/latest/projects/{project_uuid}/edges/label/{edge_label}": {
            "get": {
                "tags": [
                    "edges"
                ],
                "summary": "Get edges by their label from a project by its UUID",
                "description": "Method to return all edges with the specified edge label\n\nArgs:\n    project_uuid (str): id of the project vertex\n    edge_label (str): label of the edge (\"contains\" or \"influences\")\n\nReturns:\n    List[EdgeResponse]: List of Edges",
                "operationId": "read_all_edges_from_project_latest_projects__project_uuid__edges_label__edge_label__get",
                "parameters": [
                    {
                        "name": "project_uuid",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Project Uuid"
                        }
                    },
                    {
                        "name": "edge_label",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Edge Label"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/EdgeResponse"
                                    },
                                    "title": "Response Read All Edges From Project Latest Projects  Project Uuid  Edges Label  Edge Label  Get"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/latest/projects/{project_uuid}/export": {
            "get": {
                "tags": [
                    "projects"
                ],
                "summary": "Export a project",
                "description": "Method to export one project based on the id in JSON format\n\nArgs\n    project_uuid (str): id of the vertex with the label \"project\"'\n\nReturns\n    json_dict: JSON dictionary containing the project data",
                "operationId": "export_project_latest_projects__project_uuid__export_get",
                "parameters": [
                    {
                        "name": "project_uuid",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Project Uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "title": "Response Export Project Latest Projects  Project Uuid  Export Get"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/latest/projects/{project_uuid}/influence-diagram": {
            "get": {
                "tags": [
                    "structures"
                ],
                "summary": "Get the influence diagram from project by its UUID",
                "description": "Method to read the necessary data to create the influence diagram structure\n\nArgs:\n    project_uuid (str): id of the project vertex\n\nReturns\n    InfluenceDiagramResponse: Dict of vertices and edges",
                "operationId": "read_influence_diagram_latest_projects__project_uuid__influence_diagram_get",
                "parameters": [
                    {
                        "name": "project_uuid",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Project Uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InfluenceDiagramResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/latest/projects/{project_uuid}/issues": {
            "get": {
                "tags": [
                    "issues"
                ],
                "summary": "Get all issues by their project UUID",
                "description": "Read all issues connected to one project with filter possibilities\n\nArgs:\n    project_uuid (str): id of the project vertex\n    vertex_label (str): label of the vertices of interest\n    edge_label (str): edge_label to clarify the connection between the project\n                        node and issue node, should always be \"contains\" in this\n                        method (default \"contains\")\n    filter_model (Filter(BaseModel)): contains a dict with different properties\n                                        for filtering, like category, tag,\n                                        shortname\n\nReturns:\n    List[IssueResponse]: List of Issues which satisfy the condition to be\n                            connected to the Project vertex with a \"contains\" edge\n                            and have the label \"issue\" and satisfy the filters\n                            when given in filter_model",
                "operationId": "read_issues_all_latest_projects__project_uuid__issues_get",
                "parameters": [
                    {
                        "name": "project_uuid",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Project Uuid"
                        }
                    },
                    {
                        "name": "category",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Category"
                        }
                    },
                    {
                        "name": "hierarchy",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Hierarchy"
                        }
                    },
                    {
                        "name": "tag",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Tag"
                        }
                    },
                    {
                        "name": "shortname",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Shortname"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Name"
                        }
                    },
                    {
                        "name": "decisionType",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Decisiontype"
                        }
                    },
                    {
                        "name": "keyUncertainty",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Keyuncertainty"
                        }
                    },
                    {
                        "name": "boundary",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Boundary"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/IssueResponse-Output"
                                    },
                                    "title": "Response Read Issues All Latest Projects  Project Uuid  Issues Get"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "issues"
                ],
                "summary": "Create a new issue by its project UUID",
                "description": "Method to create a new issue connected to a project vertex\n\n    Creates vertex with the label \"issue\" and the properties of issue_data\n    Creates an edge between the project vertex specified by project_uuid and\n    the newly create issue vertex\n\nArgs:\n    project_uuid (str): id of the project vertex the new issue will be\n                        connected to\n    issue_data (IssueCreate): contains all properties for the issue\n\nReturns:\n    IssueResponse: Created Issue with the issue_data as IssueCreate",
                "operationId": "create_latest_projects__project_uuid__issues_post",
                "parameters": [
                    {
                        "name": "project_uuid",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Project Uuid"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/IssueCreate"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IssueResponse-Output"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/latest/projects/{project_uuid}/merge": {
            "post": {
                "tags": [
                    "issues"
                ],
                "summary": "Merged 2 issues within a project by its UUID",
                "description": "Function to merge two issues, will create a new issue if source issue or\n    destination issue is not a merged issue already.\n\n    Will add new edges \"merged_into\" between the merged issue and the source\n    issue and/or destination issue\n    Will remove the \"contains\" edge between the project and the children issues\n    of the new merged issue\n\nArgs:\n    project_uuid (str)\n    source_issue (IssueResponse)\n    destination_issue (IssueResponse)\n\nReturns:\n    merged_issue (IssueResponse)",
                "operationId": "merge_latest_projects__project_uuid__merge_post",
                "parameters": [
                    {
                        "name": "project_uuid",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Project Uuid"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Body_merge_latest_projects__project_uuid__merge_post"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IssueResponse-Output"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/latest/projects/{project_uuid}/objectives": {
            "get": {
                "tags": [
                    "objectives"
                ],
                "summary": "Get all objectives by their project UUID",
                "description": "Read all objectives connected to one project with filter possibilities\n\nArgs:\n    project_uuid (str): id of the project vertex\n    vertex_label (str): label of the vertices of interest\n    edge_label (str): edge_label to clarify the connection between the project\n                        node and objective node, should always be \"contains\" in\n                        this method (default \"contains\")\n    filter_model (Filter (BaseModel))\n        contains a dict with different properties for filtering, like hierarchy,\n        tag, and description\n\nReturns\n    List[ObjectiveResponse]: List of Objectives which satisfy the condition to\n                                be connected to the Project vertex with a\n                                \"contains\" edge and have the label \"objective\" and\n                                satisfy the filters when the filter_model is given",
                "operationId": "read_objectives_all_latest_projects__project_uuid__objectives_get",
                "parameters": [
                    {
                        "name": "project_uuid",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Project Uuid"
                        }
                    },
                    {
                        "name": "category",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Category"
                        }
                    },
                    {
                        "name": "hierarchy",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Hierarchy"
                        }
                    },
                    {
                        "name": "tag",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Tag"
                        }
                    },
                    {
                        "name": "shortname",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Shortname"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Name"
                        }
                    },
                    {
                        "name": "decisionType",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Decisiontype"
                        }
                    },
                    {
                        "name": "keyUncertainty",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Keyuncertainty"
                        }
                    },
                    {
                        "name": "boundary",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Boundary"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ObjectiveResponse"
                                    },
                                    "title": "Response Read Objectives All Latest Projects  Project Uuid  Objectives Get"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "objectives"
                ],
                "summary": "Create a new objective by its project UUID",
                "description": "Method to create a new objective connected to a project vertex\n\n    Creates vertex with the label \"objective\" and the properties of\n    objective_data\n    Creates an edge between the project vertex specified by project_uuid\n    and the newly create objective vertex\n\nArgs:\n    project_uuid (str): id of the project vertex the new objective will be\n                        connected to\n    objective_data (ObjectiveCreate): contains all properties for the objective\n\nReturns:\n    ObjectiveResponse: Created Objective with the objective_data as\n                        ObjectiveData",
                "operationId": "create_latest_projects__project_uuid__objectives_post",
                "parameters": [
                    {
                        "name": "project_uuid",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Project Uuid"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ObjectiveCreate"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ObjectiveResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/latest/projects/{project_uuid}/opportunities": {
            "get": {
                "tags": [
                    "opportunities"
                ],
                "summary": "Get all opportunities by their project UUID",
                "description": "Read all opportunitys connected to one project with filter possibilities\n\nArgs:\n    project_uuid (str): id of the project vertex\n    vertex_label (str): label of the vertices of interest\n    edge_label (str):  edge_label to clarify the connection between the project\n                        node and opportunity node, should always be \"contains\"\n                        in this method (default \"contains\")\n    filter_model (Filter(BaseModel)): contains a dict with different properties\n                                        for filtering, like tag and description\n\nReturns\n    List[OpportunityResponse]: List of Opportunitys which satisfy the condition\n                                to be connected to the Project vertex with a\n                                \"contains\" edge and have the label \"opportunity\"\n                                and satisfy the filters when the filter_model is\n                                given",
                "operationId": "read_opportunities_all_latest_projects__project_uuid__opportunities_get",
                "parameters": [
                    {
                        "name": "project_uuid",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Project Uuid"
                        }
                    },
                    {
                        "name": "category",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Category"
                        }
                    },
                    {
                        "name": "hierarchy",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Hierarchy"
                        }
                    },
                    {
                        "name": "tag",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Tag"
                        }
                    },
                    {
                        "name": "shortname",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Shortname"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Name"
                        }
                    },
                    {
                        "name": "decisionType",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Decisiontype"
                        }
                    },
                    {
                        "name": "keyUncertainty",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Keyuncertainty"
                        }
                    },
                    {
                        "name": "boundary",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Boundary"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/OpportunityResponse"
                                    },
                                    "title": "Response Read Opportunities All Latest Projects  Project Uuid  Opportunities Get"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "opportunities"
                ],
                "summary": "Create a new opportunity by its project UUID",
                "description": "Method to create a new opportunity connected to a project vertex\n\n    Creates vertex with the label \"opportunity\" and the properties of\n    opportunity_data\n    Creates an edge between the project vertex specified by project_uuid and the\n    newly create opportunity vertex\n\nArgs:\n    project_uuid (str): id of the project vertex the new opportunity will be\n                        connected to\n    opportunity_data (OpportunityCreate): contains all properties for the\n                                        opportunity\n\nReturns:\n    OpportunityResponse: Created Opportunity with the opportunity_data as\n    OpportunityCreate",
                "operationId": "create_latest_projects__project_uuid__opportunities_post",
                "parameters": [
                    {
                        "name": "project_uuid",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Project Uuid"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/OpportunityCreate"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OpportunityResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/latest/projects/{project_uuid}/un-merge/issues/{merged_issue_uuid}": {
            "post": {
                "tags": [
                    "issues"
                ],
                "summary": "Unmerge a merged issue by its UUID within a project by its UUID",
                "description": "Function to un-merge a merged issue\n\n    Will create new \"contains\" edges for the parents of the merged issue\n    Will remove the merged issue vertex\n\nArgs:\n    project_uuid (str)\n    merged_issue_uuid (str)\n\nReturns:\n    list[str]: uuids of the issues that had been merged",
                "operationId": "un_merge_latest_projects__project_uuid__un_merge_issues__merged_issue_uuid__post",
                "parameters": [
                    {
                        "name": "project_uuid",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Project Uuid"
                        }
                    },
                    {
                        "name": "merged_issue_uuid",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Merged Issue Uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    },
                                    "title": "Response Un Merge Latest Projects  Project Uuid  Un Merge Issues  Merged Issue Uuid  Post"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/latest/vertices/label/{vertex_label}": {
            "get": {
                "tags": [
                    "vertex"
                ],
                "summary": "Get all vertices by their label",
                "description": "Read all vertices given a label\n\nArgs:\n    vertex_label (str): label of vertices to read (e.g. opportunity)\n\nReturns:\n    list[VertexResponse]: list of vertices with the given label",
                "operationId": "read_vertex_all_latest_vertices_label__vertex_label__get",
                "parameters": [
                    {
                        "name": "vertex_label",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Vertex Label"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/VertexResponse"
                                    },
                                    "title": "Response Read Vertex All Latest Vertices Label  Vertex Label  Get"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "vertex"
                ],
                "summary": "Create a new vertex by its label",
                "description": "Creates a new vertex based on vertex data\n\nArgs:\n    vertex_label (str): given vertex label for gremlin DB, e.g. \"issue\",\n                        \"project\", \"opportunity\", \"objective\"\n    vertex (VertexCreate): data for properties in vertex\n        provides generated uuid\n        provides uuid will also be set as the id in the DB\n\nReturn:\n    VertexResponse: dict of the created vertex",
                "operationId": "create_vertex_latest_vertices_label__vertex_label__post",
                "parameters": [
                    {
                        "name": "vertex_label",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Vertex Label"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/VertexCreate"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/VertexResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/latest/vertices/{vertex_uuid}": {
            "delete": {
                "tags": [
                    "vertex"
                ],
                "summary": "Delete a vertex by its UUID",
                "description": "method to delete a vertex based on the vertex id\n\nArgs:\n    vertex_uuid (str): id of the vertex which will be deleted\n\nReturn:\n    None",
                "operationId": "delete_vertex_latest_vertices__vertex_uuid__delete",
                "parameters": [
                    {
                        "name": "vertex_uuid",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Vertex Uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "tags": [
                    "vertex"
                ],
                "summary": "Get a vertex by its UUID",
                "description": "Reads a vertex based on the vertex id in the DB\n\nArgs:\n    vertex_uuid (str): uuid of the vertex.\n\n        uuid property [g.V().property(\"uuid\",...)] and vertex id [g.V(id)] are\n        the same based on the implementation in the create method\n        This is an active choice of us, otherwise, the id will be automatically\n        generated in the DB\n\nReturn:\n    VertexResponse: dict with all data of the vertex (VertexResponse)",
                "operationId": "read_vertex_latest_vertices__vertex_uuid__get",
                "parameters": [
                    {
                        "name": "vertex_uuid",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Vertex Uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/VertexResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "vertex"
                ],
                "summary": "Delete a vertex by its UUID",
                "description": "Updated the specified vertex with the new vertex properties\n\nArgs:\n    vertex_uuid (str): id of the to be updated vertex\n    modified_fields (VertexUpdate): properties of vertices which will\n                                    be updated\n\nReturn:\n    VertexResponse: vertex dict with updated properties",
                "operationId": "update_vertex_latest_vertices__vertex_uuid__patch",
                "parameters": [
                    {
                        "name": "vertex_uuid",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Vertex Uuid"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/VertexUpdate"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/VertexResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/latest/vertices/{vertex_uuid}/children": {
            "get": {
                "tags": [
                    "vertex"
                ],
                "summary": "Get the children of a vertex by its UUID",
                "description": "Read vertices based on outgoing edge labels.\n\nArgs:\n    vertex_uuid (str): id of the vertex\n    edge_label (str): edge label, e.g. \"contains\" or \"influences\"\n    original_vertex_label (str, optional): label of the vertices we are\n                                            interested in (e.g. only issues or\n                                            also opportunities and objectives).\n                                            Defaults to None.\n    filter_model (Filter, optional): BaseModel containing properties to use as\n                                        a filter, for example the type or tag of\n                                        vertices. Defaults to None.\n\nReturns:\n    List[VertexResponse]:\n        List of all vertices connected to the vertex with the vertex id\n        vertex_uuid through an edge with the label edge_label\n        When original_vertex_label is given the vertices will be filtered\n        based on the label of the vertex, e.g. it will return either \"issue\",\n        \"opportunity\" or \"objective\" vertices otherwise, all vertices are\n        returned\n        When filter_model is given, the vertices will be filtered based on the\n        content of the filter model. Currently this can be \"tag\", \"type\",...\n        and other properties of the vertices defined in the database\n        If filter_model is None, no filter will be applied and all vertices will\n        be returned.",
                "operationId": "read_out_vertex_latest_vertices__vertex_uuid__children_get",
                "parameters": [
                    {
                        "name": "vertex_uuid",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Vertex Uuid"
                        }
                    },
                    {
                        "name": "edge_label",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Edge Label"
                        }
                    },
                    {
                        "name": "original_vertex_label",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "title": "Original Vertex Label"
                        }
                    },
                    {
                        "name": "category",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Category"
                        }
                    },
                    {
                        "name": "hierarchy",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Hierarchy"
                        }
                    },
                    {
                        "name": "tag",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Tag"
                        }
                    },
                    {
                        "name": "shortname",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Shortname"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Name"
                        }
                    },
                    {
                        "name": "decisionType",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Decisiontype"
                        }
                    },
                    {
                        "name": "keyUncertainty",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Keyuncertainty"
                        }
                    },
                    {
                        "name": "boundary",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Boundary"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/VertexResponse"
                                    },
                                    "title": "Response Read Out Vertex Latest Vertices  Vertex Uuid  Children Get"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/latest/vertices/{vertex_uuid}/edges/label/{edge_label}/incoming": {
            "get": {
                "tags": [
                    "edges"
                ],
                "summary": "Get incoming edges by their label and their tails from a project by its UUID",
                "description": "Returns edges going in to the specified vertex\n\nArgs:\n    vertex_uuid (str): id of the vertex\n    edge_label (str): label of the edge\nReturn:\n    List of edges",
                "operationId": "read_in_edge_to_vertex_latest_vertices__vertex_uuid__edges_label__edge_label__incoming_get",
                "parameters": [
                    {
                        "name": "vertex_uuid",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Vertex Uuid"
                        }
                    },
                    {
                        "name": "edge_label",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Edge Label"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/EdgeResponse"
                                    },
                                    "title": "Response Read In Edge To Vertex Latest Vertices  Vertex Uuid  Edges Label  Edge Label  Incoming Get"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/latest/vertices/{vertex_uuid}/edges/label/{edge_label}/outgoing": {
            "get": {
                "tags": [
                    "edges"
                ],
                "summary": "Get outgoing edges by their label and their heads from a project by its UUID",
                "description": "Returns edges going out of the specified vertex\n\nArgs:\n    vertex_uuid (str): id of the vertex\n    edge_label (str): label of the edge\nReturn:\n    List of edges",
                "operationId": "read_out_edge_from_vertex_latest_vertices__vertex_uuid__edges_label__edge_label__outgoing_get",
                "parameters": [
                    {
                        "name": "vertex_uuid",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Vertex Uuid"
                        }
                    },
                    {
                        "name": "edge_label",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Edge Label"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/EdgeResponse"
                                    },
                                    "title": "Response Read Out Edge From Vertex Latest Vertices  Vertex Uuid  Edges Label  Edge Label  Outgoing Get"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/latest/vertices/{vertex_uuid}/parents": {
            "get": {
                "tags": [
                    "vertex"
                ],
                "summary": "Get the parents of a vertex by its UUID",
                "description": "Read vertices based on incoming edge labels.\n\nArgs:\n    vertex_uuid (str): id of the vertex\n    edge_label (str): edge label, e.g. \"contains\" or \"influences\"\n    original_vertex_label (str, optional): label of the vertices we are\n                                            interested in (e.g. only issues or\n                                            also opportunities and objectives).\n                                            Defaults to None.\n    filter_model (Filter, optional): BaseModel containing properties to use\n                                        as a filter, for example the type or tag\n                                        of vertices. Defaults to None.\n\nReturns:\n    List[VertexResponse]: List of all vertices connected to the vertex with\n                            the vertex id vertex_uuid through an incoming edge\n                            with the label edge_label\n\n        When original_vertex_label is given, the vertices will be filtered\n        based on the label of the vertex, e.g. it will return either \"issue\",\n        \"opportunity\" or \"objective\" vertices. Otherwise, all vertices are\n        returned.\n        When filter_model is given, the vertices will be filtered based on\n        the content of the filter model. Currently, this can be \"tag\", \"type\",\n        and other properties of the vertices defined in the database.\n        If filter_model is None, no filter will be applied and all vertices will\n        be returned.",
                "operationId": "read_in_vertex_latest_vertices__vertex_uuid__parents_get",
                "parameters": [
                    {
                        "name": "vertex_uuid",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Vertex Uuid"
                        }
                    },
                    {
                        "name": "edge_label",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Edge Label"
                        }
                    },
                    {
                        "name": "original_vertex_label",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "title": "Original Vertex Label"
                        }
                    },
                    {
                        "name": "category",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Category"
                        }
                    },
                    {
                        "name": "hierarchy",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Hierarchy"
                        }
                    },
                    {
                        "name": "tag",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Tag"
                        }
                    },
                    {
                        "name": "shortname",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Shortname"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Name"
                        }
                    },
                    {
                        "name": "decisionType",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Decisiontype"
                        }
                    },
                    {
                        "name": "keyUncertainty",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Keyuncertainty"
                        }
                    },
                    {
                        "name": "boundary",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Boundary"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/VertexResponse"
                                    },
                                    "title": "Response Read In Vertex Latest Vertices  Vertex Uuid  Parents Get"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/versions": {
            "get": {
                "tags": [
                    "Versions"
                ],
                "summary": "Get Versions",
                "operationId": "get_versions_versions_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "title": "Response Get Versions Versions Get"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/": {
            "get": {
                "summary": "Read Root",
                "operationId": "read_root__get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "Body_merge_latest_projects__project_uuid__merge_post": {
                "properties": {
                    "source_issue": {
                        "$ref": "#/components/schemas/IssueResponse-Input"
                    },
                    "destination_issue": {
                        "$ref": "#/components/schemas/IssueResponse-Input"
                    }
                },
                "type": "object",
                "required": [
                    "source_issue",
                    "destination_issue"
                ],
                "title": "Body_merge_latest_projects__project_uuid__merge_post"
            },
            "Body_merge_v0_projects__project_uuid__merge_post": {
                "properties": {
                    "source_issue": {
                        "$ref": "#/components/schemas/IssueResponse-Input"
                    },
                    "destination_issue": {
                        "$ref": "#/components/schemas/IssueResponse-Input"
                    }
                },
                "type": "object",
                "required": [
                    "source_issue",
                    "destination_issue"
                ],
                "title": "Body_merge_v0_projects__project_uuid__merge_post"
            },
            "CommentData": {
                "properties": {
                    "comment": {
                        "type": "string",
                        "title": "Comment"
                    },
                    "author": {
                        "type": "string",
                        "title": "Author"
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                    "comment",
                    "author"
                ],
                "title": "CommentData",
                "description": "Model for comments on issues"
            },
            "DecisionTreeNodeData": {
                "properties": {
                    "node_type": {
                        "type": "string",
                        "title": "Node Type"
                    },
                    "description": {
                        "type": "string",
                        "title": "Description"
                    },
                    "shortname": {
                        "type": "string",
                        "title": "Shortname"
                    },
                    "uuid": {
                        "type": "string",
                        "title": "Uuid"
                    },
                    "branch_name": {
                        "type": "string",
                        "title": "Branch Name"
                    },
                    "alternatives": {
                        "anyOf": [
                            {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Alternatives"
                    },
                    "probabilities": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/ProbabilityData"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "utility": {
                        "anyOf": [
                            {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Utility"
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                    "node_type",
                    "description",
                    "shortname",
                    "uuid",
                    "branch_name"
                ],
                "title": "DecisionTreeNodeData",
                "examples": [
                    {
                        "alternatives": [
                            "Test",
                            " no Test"
                        ],
                        "name": "Joe can test the car",
                        "node_type": "DecisionNode",
                        "shortname": "Test",
                        "uuid": "ad651f50-22de-4f85-a560-bf5fb2d9f706"
                    }
                ]
            },
            "DecisionTreeResponse": {
                "properties": {
                    "id": {
                        "$ref": "#/components/schemas/DecisionTreeNodeData"
                    },
                    "children": {
                        "anyOf": [
                            {
                                "items": {
                                    "$ref": "#/components/schemas/DecisionTreeResponse"
                                },
                                "type": "array"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Children"
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                    "id"
                ],
                "title": "DecisionTreeResponse",
                "examples": [
                    {
                        "children": [
                            {
                                "children": [
                                    {
                                        "id": {
                                            "name": "Utility",
                                            "node_type": "UtilityNode",
                                            "shortname": "v",
                                            "utility": [],
                                            "uuid": "55d46d6b-9563-4fbc-80aa-8368a60d3e31"
                                        }
                                    }
                                ],
                                "id": {
                                    "name": "The result of the test is currently unknown",
                                    "node_type": "UncertaintyNode",
                                    "probabilities": {
                                        "dtype": "DiscreteUnconditionalProbability"
                                    },
                                    "shortname": "Test Result",
                                    "uuid": "e0d590dc-b62f-4476-b8cc-aee672f29458"
                                }
                            }
                        ],
                        "id": {
                            "alternatives": [
                                "\"Test\"",
                                "\" no Test\""
                            ],
                            "name": "Joe can test the car",
                            "node_type": "DecisionNode",
                            "shortname": "Test",
                            "uuid": "ad651f50-22de-4f85-a560-bf5fb2d9f706"
                        }
                    }
                ]
            },
            "EdgeResponse": {
                "properties": {
                    "version": {
                        "type": "string",
                        "title": "Version",
                        "default": "v0"
                    },
                    "uuid": {
                        "type": "string",
                        "title": "Uuid"
                    },
                    "outV": {
                        "type": "string",
                        "title": "Outv"
                    },
                    "inV": {
                        "type": "string",
                        "title": "Inv"
                    },
                    "id": {
                        "type": "string",
                        "title": "Id"
                    },
                    "label": {
                        "type": "string",
                        "title": "Label"
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                    "uuid",
                    "outV",
                    "inV",
                    "id",
                    "label"
                ],
                "title": "EdgeResponse",
                "examples": [
                    {
                        "id": "22222222-bbbb-eeee-aaaa-333333333333",
                        "inV": "11111111-aaaa-2222-bbbb-888888888888",
                        "label": "contains",
                        "outV": "44444444-0000-1111-ffff-cccccccccccc",
                        "uuid": "22222222-bbbb-eeee-aaaa-333333333333"
                    }
                ]
            },
            "HTTPValidationError": {
                "properties": {
                    "detail": {
                        "items": {
                            "$ref": "#/components/schemas/ValidationError"
                        },
                        "type": "array",
                        "title": "Detail"
                    }
                },
                "type": "object",
                "title": "HTTPValidationError"
            },
            "InfluenceDiagramResponse": {
                "properties": {
                    "vertices": {
                        "items": {
                            "$ref": "#/components/schemas/IssueResponse-Output"
                        },
                        "type": "array",
                        "title": "Vertices"
                    },
                    "edges": {
                        "items": {
                            "$ref": "#/components/schemas/EdgeResponse"
                        },
                        "type": "array",
                        "title": "Edges"
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                    "vertices",
                    "edges"
                ],
                "title": "InfluenceDiagramResponse",
                "examples": [
                    {
                        "edges": [
                            {
                                "id": "3ed21afc-be76-4b14-be63-6d626e9fbb3c",
                                "inV": "8e729eb3-f47d-4380-99d8-ed823376dc86",
                                "outV": "ed58b7b1-ff91-4886-9311-7b1787d76cb1",
                                "uuid": "3ed21afc-be76-4b14-be63-6d626e9fbb3c"
                            },
                            {
                                "id": "1b32fd0d-7169-496e-9881-893b18f5f8cf",
                                "inV": "98d186e8-a506-4819-b040-dc0405a464c2",
                                "outV": "ed58b7b1-ff91-4886-9311-7b1787d76cb1",
                                "uuid": "1b32fd0d-7169-496e-9881-893b18f5f8cf"
                            }
                        ],
                        "vertices": [
                            {
                                "alternatives": "[do or do not, there is no try]",
                                "category": "uncertainty",
                                "date": "2024-03-14T07:12:05.069295",
                                "decisionType": "tactical",
                                "description": "this is an issue to call yours",
                                "ids": "test",
                                "index": "0",
                                "influenceNodeUUID": "123",
                                "keyUncertainty": "true",
                                "probabilities": "[0.3, 0.7]",
                                "shortname": "thelitissue",
                                "tag": "subsurface",
                                "timestamp": 1710400325.0692892,
                                "uuid": "98d186e8-a506-4819-b040-dc0405a464c2"
                            },
                            {
                                "alternatives": "[do or do not, there is no try]",
                                "category": "decision",
                                "date": "2024-03-14T07:12:10.627895",
                                "decisionType": "tactical",
                                "description": "this is an issue to call yours",
                                "ids": "test",
                                "index": "0",
                                "influenceNodeUUID": "123",
                                "keyUncertainty": "true",
                                "probabilities": "[0.3, 0.7]",
                                "shortname": "thelitissue",
                                "tag": "subsurface",
                                "timestamp": 1710400330.6278934,
                                "uuid": "8e729eb3-f47d-4380-99d8-ed823376dc86"
                            },
                            {
                                "alternatives": "[do or do not, there is no try]",
                                "category": "decision",
                                "date": "2024-03-14T07:12:10.016715",
                                "decisionType": "tactical",
                                "description": "this is an issue to call yours",
                                "ids": "test",
                                "index": "0",
                                "influenceNodeUUID": "123",
                                "keyUncertainty": "true",
                                "probabilities": "[0.3, 0.7]",
                                "shortname": "thelitissue",
                                "tag": "subsurface",
                                "timestamp": 1710400330.0167134,
                                "uuid": "ed58b7b1-ff91-4886-9311-7b1787d76cb1"
                            }
                        ]
                    }
                ]
            },
            "IssueCreate": {
                "properties": {
                    "description": {
                        "type": "string",
                        "title": "Description"
                    },
                    "shortname": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Shortname"
                    },
                    "category": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Category"
                    },
                    "tag": {
                        "anyOf": [
                            {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Tag"
                    },
                    "keyUncertainty": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Keyuncertainty"
                    },
                    "decisionType": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Decisiontype"
                    },
                    "probabilities": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/ProbabilityData"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "alternatives": {
                        "anyOf": [
                            {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Alternatives"
                    },
                    "boundary": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Boundary"
                    },
                    "comments": {
                        "anyOf": [
                            {
                                "items": {
                                    "$ref": "#/components/schemas/CommentData"
                                },
                                "type": "array"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Comments"
                    },
                    "influenceNodeUUID": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Influencenodeuuid"
                    },
                    "index": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Index"
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                    "description"
                ],
                "title": "IssueCreate",
                "description": "Issue data model",
                "examples": [
                    {
                        "alternatives": "[\"do or do not\", \"there is no try\"]",
                        "boundary": "in",
                        "category": "Decision",
                        "comments": {
                            "author": "John Doe",
                            "comment": "Question: is this correct?"
                        },
                        "decisionType": "tactical",
                        "description": "this is an issue to call yours",
                        "index": "0",
                        "influenceNodeUUID": "123",
                        "keyUncertainty": "true",
                        "probabilities": {
                            "dtype": "DiscreteUnconditionalProbability",
                            "probability_function": [
                                [
                                    0.5,
                                    0.5
                                ],
                                [
                                    0.4,
                                    0.6
                                ]
                            ],
                            "variables": {
                                "Node1": [
                                    "Outcome1",
                                    "Outcome2"
                                ],
                                "Node2": [
                                    "Outcome21",
                                    "Outcome22"
                                ]
                            }
                        },
                        "shortname": "thelitissue",
                        "tag": [
                            "subsurface"
                        ]
                    }
                ]
            },
            "IssueResponse-Input": {
                "properties": {
                    "version": {
                        "type": "string",
                        "title": "Version",
                        "default": "v0"
                    },
                    "uuid": {
                        "type": "string",
                        "title": "Uuid"
                    },
                    "timestamp": {
                        "type": "string",
                        "title": "Timestamp"
                    },
                    "date": {
                        "type": "string",
                        "title": "Date"
                    },
                    "ids": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Ids",
                        "default": "test"
                    },
                    "shortname": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Shortname"
                    },
                    "description": {
                        "type": "string",
                        "title": "Description"
                    },
                    "tag": {
                        "anyOf": [
                            {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Tag"
                    },
                    "category": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Category"
                    },
                    "index": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Index"
                    },
                    "keyUncertainty": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Keyuncertainty"
                    },
                    "decisionType": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Decisiontype"
                    },
                    "alternatives": {
                        "anyOf": [
                            {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Alternatives"
                    },
                    "probabilities": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/ProbabilityData"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "influenceNodeUUID": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Influencenodeuuid"
                    },
                    "boundary": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Boundary"
                    },
                    "comments": {
                        "anyOf": [
                            {
                                "items": {
                                    "$ref": "#/components/schemas/CommentData"
                                },
                                "type": "array"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Comments"
                    },
                    "T.id": {
                        "type": "string",
                        "title": "T.Id"
                    },
                    "T.label": {
                        "type": "string",
                        "title": "T.Label"
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                    "uuid",
                    "timestamp",
                    "date",
                    "shortname",
                    "description",
                    "tag",
                    "category",
                    "index",
                    "keyUncertainty",
                    "decisionType",
                    "alternatives",
                    "probabilities",
                    "influenceNodeUUID",
                    "boundary",
                    "comments",
                    "T.id",
                    "T.label"
                ],
                "title": "IssueResponse",
                "examples": [
                    {
                        "alternatives": "[\"do or do not\", \"there is no try\"]",
                        "boundary": "in",
                        "category": "Decision",
                        "comments": {
                            "author": "John Doe",
                            "comment": "Question: is this correct?"
                        },
                        "decisionType": "tactical",
                        "description": "this is an issue to call yours",
                        "index": "0",
                        "influenceNodeUUID": "123",
                        "keyUncertainty": "true",
                        "probabilities": {
                            "dtype": "DiscreteUnconditionalProbability",
                            "probability_function": [
                                [
                                    0.5,
                                    0.5
                                ],
                                [
                                    0.4,
                                    0.6
                                ]
                            ],
                            "variables": {
                                "Node1": [
                                    "Outcome1",
                                    "Outcome2"
                                ],
                                "Node2": [
                                    "Outcome21",
                                    "Outcome22"
                                ]
                            }
                        },
                        "shortname": "thelitissue",
                        "tag": [
                            "subsurface"
                        ]
                    }
                ]
            },
            "IssueResponse-Output": {
                "properties": {
                    "version": {
                        "type": "string",
                        "title": "Version",
                        "default": "v0"
                    },
                    "uuid": {
                        "type": "string",
                        "title": "Uuid"
                    },
                    "timestamp": {
                        "type": "string",
                        "title": "Timestamp"
                    },
                    "date": {
                        "type": "string",
                        "title": "Date"
                    },
                    "ids": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Ids",
                        "default": "test"
                    },
                    "shortname": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Shortname"
                    },
                    "description": {
                        "type": "string",
                        "title": "Description"
                    },
                    "tag": {
                        "anyOf": [
                            {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Tag"
                    },
                    "category": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Category"
                    },
                    "index": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Index"
                    },
                    "keyUncertainty": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Keyuncertainty"
                    },
                    "decisionType": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Decisiontype"
                    },
                    "alternatives": {
                        "anyOf": [
                            {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Alternatives"
                    },
                    "probabilities": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/ProbabilityData"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "influenceNodeUUID": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Influencenodeuuid"
                    },
                    "boundary": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Boundary"
                    },
                    "comments": {
                        "anyOf": [
                            {
                                "items": {
                                    "$ref": "#/components/schemas/CommentData"
                                },
                                "type": "array"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Comments"
                    },
                    "id": {
                        "type": "string",
                        "title": "Id"
                    },
                    "label": {
                        "type": "string",
                        "title": "Label"
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                    "uuid",
                    "timestamp",
                    "date",
                    "shortname",
                    "description",
                    "tag",
                    "category",
                    "index",
                    "keyUncertainty",
                    "decisionType",
                    "alternatives",
                    "probabilities",
                    "influenceNodeUUID",
                    "boundary",
                    "comments",
                    "id",
                    "label"
                ],
                "title": "IssueResponse",
                "examples": [
                    {
                        "alternatives": "[\"do or do not\", \"there is no try\"]",
                        "boundary": "in",
                        "category": "Decision",
                        "comments": {
                            "author": "John Doe",
                            "comment": "Question: is this correct?"
                        },
                        "decisionType": "tactical",
                        "description": "this is an issue to call yours",
                        "index": "0",
                        "influenceNodeUUID": "123",
                        "keyUncertainty": "true",
                        "probabilities": {
                            "dtype": "DiscreteUnconditionalProbability",
                            "probability_function": [
                                [
                                    0.5,
                                    0.5
                                ],
                                [
                                    0.4,
                                    0.6
                                ]
                            ],
                            "variables": {
                                "Node1": [
                                    "Outcome1",
                                    "Outcome2"
                                ],
                                "Node2": [
                                    "Outcome21",
                                    "Outcome22"
                                ]
                            }
                        },
                        "shortname": "thelitissue",
                        "tag": [
                            "subsurface"
                        ]
                    }
                ]
            },
            "IssueUpdate": {
                "properties": {
                    "shortname": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Shortname"
                    },
                    "description": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Description"
                    },
                    "tag": {
                        "anyOf": [
                            {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Tag"
                    },
                    "category": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Category"
                    },
                    "index": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Index"
                    },
                    "keyUncertainty": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Keyuncertainty"
                    },
                    "decisionType": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Decisiontype"
                    },
                    "alternatives": {
                        "anyOf": [
                            {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Alternatives"
                    },
                    "probabilities": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/ProbabilityData"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "influenceNodeUUID": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Influencenodeuuid"
                    },
                    "boundary": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Boundary"
                    },
                    "comments": {
                        "anyOf": [
                            {
                                "items": {
                                    "$ref": "#/components/schemas/CommentData"
                                },
                                "type": "array"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Comments"
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "title": "IssueUpdate",
                "examples": [
                    {
                        "alternatives": "[\"do or do not\", \"there is no try\"]",
                        "boundary": "in",
                        "category": "Decision",
                        "comments": {
                            "author": "John Doe",
                            "comment": "Question: is this correct?"
                        },
                        "decisionType": "tactical",
                        "description": "this is an issue to call yours",
                        "index": "0",
                        "influenceNodeUUID": "123",
                        "keyUncertainty": "true",
                        "probabilities": {
                            "dtype": "DiscreteUnconditionalProbability",
                            "probability_function": [
                                [
                                    0.5,
                                    0.5
                                ],
                                [
                                    0.4,
                                    0.6
                                ]
                            ],
                            "variables": {
                                "Node1": [
                                    "Outcome1",
                                    "Outcome2"
                                ],
                                "Node2": [
                                    "Outcome21",
                                    "Outcome22"
                                ]
                            }
                        },
                        "shortname": "thelitissue",
                        "tag": [
                            "subsurface"
                        ]
                    }
                ]
            },
            "ObjectiveCreate": {
                "properties": {
                    "description": {
                        "type": "string",
                        "title": "Description"
                    },
                    "hierarchy": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Hierarchy"
                    },
                    "tag": {
                        "anyOf": [
                            {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Tag"
                    },
                    "index": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Index"
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                    "description"
                ],
                "title": "ObjectiveCreate",
                "description": "Objective data model",
                "examples": [
                    {
                        "description": "objectively objecting the objectives",
                        "hierarchy": "Fundamental",
                        "index": "0",
                        "tag": [
                            "subsurface"
                        ]
                    }
                ]
            },
            "ObjectiveResponse": {
                "properties": {
                    "version": {
                        "type": "string",
                        "title": "Version",
                        "default": "v0"
                    },
                    "uuid": {
                        "type": "string",
                        "title": "Uuid"
                    },
                    "timestamp": {
                        "type": "string",
                        "title": "Timestamp"
                    },
                    "date": {
                        "type": "string",
                        "title": "Date"
                    },
                    "ids": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Ids",
                        "default": "test"
                    },
                    "description": {
                        "type": "string",
                        "title": "Description"
                    },
                    "tag": {
                        "anyOf": [
                            {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Tag"
                    },
                    "index": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Index"
                    },
                    "hierarchy": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Hierarchy"
                    },
                    "id": {
                        "type": "string",
                        "title": "Id"
                    },
                    "label": {
                        "type": "string",
                        "title": "Label"
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                    "uuid",
                    "timestamp",
                    "date",
                    "description",
                    "tag",
                    "index",
                    "hierarchy",
                    "id",
                    "label"
                ],
                "title": "ObjectiveResponse",
                "examples": [
                    {
                        "description": "objectively objecting the objectives",
                        "hierarchy": "Fundamental",
                        "index": "0",
                        "tag": [
                            "subsurface"
                        ]
                    }
                ]
            },
            "ObjectiveUpdate": {
                "properties": {
                    "description": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Description"
                    },
                    "tag": {
                        "anyOf": [
                            {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Tag"
                    },
                    "index": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Index"
                    },
                    "hierarchy": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Hierarchy"
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "title": "ObjectiveUpdate",
                "examples": [
                    {
                        "description": "objectively objecting the objectives",
                        "hierarchy": "Fundamental",
                        "index": "0",
                        "tag": [
                            "subsurface"
                        ]
                    }
                ]
            },
            "OpportunityCreate": {
                "properties": {
                    "description": {
                        "type": "string",
                        "title": "Description"
                    },
                    "tag": {
                        "anyOf": [
                            {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Tag"
                    },
                    "index": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Index"
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                    "description"
                ],
                "title": "OpportunityCreate",
                "description": "Opportunity data model",
                "examples": [
                    {
                        "description": "opportunistic opportunity",
                        "index": "0",
                        "tag": [
                            "subsurface"
                        ]
                    }
                ]
            },
            "OpportunityResponse": {
                "properties": {
                    "version": {
                        "type": "string",
                        "title": "Version",
                        "default": "v0"
                    },
                    "uuid": {
                        "type": "string",
                        "title": "Uuid"
                    },
                    "timestamp": {
                        "type": "string",
                        "title": "Timestamp"
                    },
                    "date": {
                        "type": "string",
                        "title": "Date"
                    },
                    "ids": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Ids",
                        "default": "test"
                    },
                    "description": {
                        "type": "string",
                        "title": "Description"
                    },
                    "tag": {
                        "anyOf": [
                            {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Tag"
                    },
                    "index": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Index"
                    },
                    "id": {
                        "type": "string",
                        "title": "Id"
                    },
                    "label": {
                        "type": "string",
                        "title": "Label"
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                    "uuid",
                    "timestamp",
                    "date",
                    "description",
                    "tag",
                    "index",
                    "id",
                    "label"
                ],
                "title": "OpportunityResponse",
                "examples": [
                    {
                        "description": "objectively objecting the objectives",
                        "index": "0",
                        "tag": [
                            "subsurface"
                        ]
                    }
                ]
            },
            "OpportunityUpdate": {
                "properties": {
                    "description": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Description"
                    },
                    "tag": {
                        "anyOf": [
                            {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Tag"
                    },
                    "index": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Index"
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "title": "OpportunityUpdate",
                "examples": [
                    {
                        "description": "opportunistic opportunity",
                        "index": "0",
                        "tag": [
                            "subsurface"
                        ]
                    }
                ]
            },
            "ProbabilityData": {
                "properties": {
                    "dtype": {
                        "type": "string",
                        "title": "Dtype"
                    },
                    "probability_function": {
                        "anyOf": [
                            {
                                "items": {
                                    "items": {
                                        "type": "number"
                                    },
                                    "type": "array"
                                },
                                "type": "array"
                            },
                            {
                                "items": {
                                    "items": {
                                        "type": "null"
                                    },
                                    "type": "array"
                                },
                                "type": "array"
                            }
                        ],
                        "title": "Probability Function"
                    },
                    "variables": {
                        "additionalProperties": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "type": "object",
                        "title": "Variables"
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                    "dtype",
                    "probability_function",
                    "variables"
                ],
                "title": "ProbabilityData",
                "description": "Model for the probability description"
            },
            "ProjectCreate": {
                "properties": {
                    "name": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Name"
                    },
                    "description": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Description"
                    },
                    "tag": {
                        "anyOf": [
                            {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Tag"
                    },
                    "decision_maker": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Decision Maker"
                    },
                    "decision_date": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Decision Date"
                    },
                    "sensitivity_label": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Sensitivity Label",
                        "default": "Restricted"
                    },
                    "index": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Index"
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                    "name"
                ],
                "title": "ProjectCreate",
                "description": "Project data model",
                "examples": [
                    {
                        "decision_date": "2021-01-01",
                        "decision_maker": "John Doe",
                        "description": "This is a project example",
                        "index": "0",
                        "name": "the little project example",
                        "sensitivity_label": "Restricted",
                        "tag": "subsurface"
                    }
                ]
            },
            "ProjectResponse": {
                "properties": {
                    "version": {
                        "type": "string",
                        "title": "Version",
                        "default": "v0"
                    },
                    "uuid": {
                        "type": "string",
                        "title": "Uuid"
                    },
                    "timestamp": {
                        "type": "string",
                        "title": "Timestamp"
                    },
                    "date": {
                        "type": "string",
                        "title": "Date"
                    },
                    "ids": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Ids",
                        "default": "test"
                    },
                    "name": {
                        "type": "string",
                        "title": "Name"
                    },
                    "description": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Description"
                    },
                    "tag": {
                        "anyOf": [
                            {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Tag"
                    },
                    "decision_maker": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Decision Maker"
                    },
                    "decision_date": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Decision Date"
                    },
                    "sensitivity_label": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Sensitivity Label"
                    },
                    "index": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Index"
                    },
                    "id": {
                        "type": "string",
                        "title": "Id"
                    },
                    "label": {
                        "type": "string",
                        "title": "Label"
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                    "uuid",
                    "timestamp",
                    "date",
                    "name",
                    "description",
                    "tag",
                    "decision_maker",
                    "decision_date",
                    "sensitivity_label",
                    "index",
                    "id",
                    "label"
                ],
                "title": "ProjectResponse",
                "examples": [
                    {
                        "decision_date": "2021-01-01",
                        "decision_maker": "John Doe",
                        "description": "This is a project example",
                        "index": "0",
                        "name": "the little project example",
                        "sensitivity_label": "Restricted",
                        "tag": "subsurface"
                    }
                ]
            },
            "ProjectUpdate": {
                "properties": {
                    "name": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Name"
                    },
                    "tag": {
                        "anyOf": [
                            {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Tag"
                    },
                    "description": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Description"
                    },
                    "index": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Index"
                    },
                    "decision_maker": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Decision Maker"
                    },
                    "decision_date": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Decision Date"
                    },
                    "sensitivity_label": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Sensitivity Label"
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "title": "ProjectUpdate",
                "examples": [
                    {
                        "decision_date": "2021-01-01",
                        "decision_maker": "John Doe",
                        "description": "This is a project example",
                        "index": "0",
                        "name": "the little project example",
                        "sensitivity_label": "Restricted",
                        "tag": "subsurface"
                    }
                ]
            },
            "ValidationError": {
                "properties": {
                    "loc": {
                        "items": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "integer"
                                }
                            ]
                        },
                        "type": "array",
                        "title": "Location"
                    },
                    "msg": {
                        "type": "string",
                        "title": "Message"
                    },
                    "type": {
                        "type": "string",
                        "title": "Error Type"
                    }
                },
                "type": "object",
                "required": [
                    "loc",
                    "msg",
                    "type"
                ],
                "title": "ValidationError"
            },
            "VertexCreate": {
                "properties": {},
                "additionalProperties": true,
                "type": "object",
                "title": "VertexCreate"
            },
            "VertexResponse": {
                "properties": {
                    "version": {
                        "type": "string",
                        "title": "Version",
                        "default": "v0"
                    },
                    "uuid": {
                        "type": "string",
                        "title": "Uuid"
                    },
                    "timestamp": {
                        "type": "string",
                        "title": "Timestamp"
                    },
                    "date": {
                        "type": "string",
                        "title": "Date"
                    },
                    "ids": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Ids",
                        "default": "test"
                    },
                    "id": {
                        "type": "string",
                        "title": "Id"
                    },
                    "label": {
                        "type": "string",
                        "title": "Label"
                    }
                },
                "additionalProperties": true,
                "type": "object",
                "required": [
                    "uuid",
                    "timestamp",
                    "date",
                    "id",
                    "label"
                ],
                "title": "VertexResponse"
            },
            "VertexUpdate": {
                "properties": {},
                "additionalProperties": true,
                "type": "object",
                "title": "VertexUpdate"
            }
        }
    }
}
